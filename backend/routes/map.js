const express = require("express");
const axios = require("axios");
const router = express.Router();
require("dotenv").config();

// Route pour r√©cup√©rer un itin√©raire entre deux villes
router.get("/route", async (req, res) => {
  const { startCity, endCity } = req.query;

  if (!startCity || !endCity) {
    return res
      .status(400)
      .json({ error: "Les villes de d√©part et d'arriv√©e sont requises." });
  }

  try {
    // üîπ 1. Obtenir les coordonn√©es des villes avec Nominatim (OpenStreetMap)
    const startResponse = await axios.get(`${process.env.OSM_API_URL}`, {
      params: { q: startCity, format: "json", limit: 1 },
    });

    const endResponse = await axios.get(`${process.env.OSM_API_URL}`, {
      params: { q: endCity, format: "json", limit: 1 },
    });

    // üîπ 2. V√©rifier si Nominatim a bien trouv√© les villes
    console.log("R√©ponse Nominatim - Start:", startResponse.data);
    console.log("R√©ponse Nominatim - End:", endResponse.data);

    if (!startResponse.data.length || !endResponse.data.length) {
      return res
        .status(404)
        .json({
          error: "Une des villes n'a pas √©t√© trouv√©e. V√©rifiez l'orthographe.",
        });
    }

    // üîπ 3. Extraire les coordonn√©es des villes
    const startCoords = {
      lat: parseFloat(startResponse.data[0].lat),
      lon: parseFloat(startResponse.data[0].lon),
    };

    const endCoords = {
      lat: parseFloat(endResponse.data[0].lat),
      lon: parseFloat(endResponse.data[0].lon),
    };

    console.log("Coordonn√©es Start:", startCoords);
    console.log("Coordonn√©es End:", endCoords);

    // üîπ 4. Obtenir l'itin√©raire avec OpenRouteService
    const routeResponse = await axios.get(
      "https://api.openrouteservice.org/v2/directions/driving-car",
      {
        params: {
          api_key: process.env.OPENROUTE_API_KEY, // Assurez-vous que la cl√© API est bien pr√©sente dans .env
          start: `${startCoords.lon},${startCoords.lat}`,
          end: `${endCoords.lon},${endCoords.lat}`,
        },
      }
    );

    if (!routeResponse.data || !routeResponse.data.features) {
      return res
        .status(500)
        .json({ error: "Impossible de r√©cup√©rer l'itin√©raire." });
    }

    // üîπ 5. Renvoyer les donn√©es JSON √† l‚Äôutilisateur
    res.json({
      route: routeResponse.data,
      startCoords,
      endCoords,
    });
  } catch (error) {
    console.error(
      "Erreur lors de la r√©cup√©ration de l'itin√©raire :",
      error.message
    );
    res
      .status(500)
      .json({ error: "Erreur interne du serveur", details: error.message });
  }
});

module.exports = router;
